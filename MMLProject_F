{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPg/ry+d7MesNWyV0oG4NDo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saniaaa111/S_Projects/blob/main/MMLProject_F\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ULMNXZC-J6N2"
      },
      "outputs": [],
      "source": [
        "# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import SimpleRNN, Dense, Dropout, LSTM\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and preprocess the MNIST dataset\n",
        "(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
        "\n",
        "# Normalize the data\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "\n",
        "# Convert labels to categorical\n",
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)\n",
        "\n",
        "# Reshape data for CNN\n",
        "X_train_cnn = X_train.reshape(-1, 28, 28, 1)\n",
        "X_test_cnn = X_test.reshape(-1, 28, 28, 1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "31UaBwpPKt-i",
        "outputId": "77ccb2a7-b860-4bb9-8d21-30346e3bfdc3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CNN Model\n",
        "cnn = Sequential()\n",
        "cnn.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n",
        "cnn.add(MaxPooling2D((2, 2)))\n",
        "cnn.add(Flatten())\n",
        "cnn.add(Dense(128, activation='relu'))\n",
        "cnn.add(Dropout(0.2))\n",
        "cnn.add(Dense(10, activation='softmax'))\n",
        "\n",
        "cnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "history_cnn = cnn.fit(X_train_cnn, y_train, epochs=5, validation_data=(X_test_cnn, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aBROxRk7KyDr",
        "outputId": "938aa01b-9668-4251-b977-4980bfacf3f8"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 45s 24ms/step - loss: 0.1852 - accuracy: 0.9439 - val_loss: 0.0611 - val_accuracy: 0.9809\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 44s 23ms/step - loss: 0.0635 - accuracy: 0.9802 - val_loss: 0.0462 - val_accuracy: 0.9842\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 43s 23ms/step - loss: 0.0449 - accuracy: 0.9861 - val_loss: 0.0364 - val_accuracy: 0.9872\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 46s 24ms/step - loss: 0.0336 - accuracy: 0.9888 - val_loss: 0.0421 - val_accuracy: 0.9858\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 44s 24ms/step - loss: 0.0252 - accuracy: 0.9919 - val_loss: 0.0374 - val_accuracy: 0.9873\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_accuracy = cnn.evaluate(X_test_cnn, y_test)[1]\n",
        "print(\"CNN Accuracy:\", cnn_accuracy)\n",
        "\n",
        "# Plotting results\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(history_cnn.history['accuracy'], label='CNN Training Accuracy')\n",
        "plt.plot(history_cnn.history['val_accuracy'], label='CNN Validation Accuracy')\n",
        "plt.title('CNN Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "ymhCp2SyL3EH",
        "outputId": "3d10baf1-8bf3-4bb3-d86c-0a5766bfe695"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 4s 11ms/step - loss: 0.0374 - accuracy: 0.9873\n",
            "CNN Accuracy: 0.9872999787330627\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EXPLANATION:\n",
        "\n",
        "\n",
        "\n",
        "1.   Loading the Dataset:\n",
        " *   The MNIST dataset is loaded using tf.keras.datasets.mnist.load_data() which returns the training and test sets.\n",
        "\n",
        "\n",
        "2.   Normalization:\n",
        " *   The pixel values of the images are normalized by dividing by 255.0 to bring the values between 0 and 1.\n",
        "\n",
        "\n",
        "3.   Label Conversion:\n",
        " *   The labels are converted to categorical format using to_categorical() which is required for multi-class classification.\n",
        "\n",
        "\n",
        "4.   Reshaping Data:\n",
        "\n",
        " * The data is reshaped to include the channel dimension, as the CNN expects input shape to be (number_of_samples, 28, 28, 1).\n",
        "\n",
        "\n",
        "5.   Building the CNN Model:\n",
        "\n",
        " * A simple CNN model is built with Conv2D, MaxPooling2D, Flatten, Dense, and Dropout layers.\n",
        "\n",
        "\n",
        "\n",
        "6.   Training the Model:\n",
        " * The model is trained using model.fit() for 5 epochs with the training data and validated on the test data.\n",
        "\n",
        "\n",
        "\n",
        "7.   Evaluating the Model:\n",
        " *  The model's accuracy is evaluated on the test set using model.evaluate().\n",
        "\n",
        "\n",
        "\n",
        "8.   Plotting Results:\n",
        " *  The training and validation accuracy are plotted using Matplotlib to visualize the model performance over epochs.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "y5b1pQzeMRML"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New section\n",
        "#**RNN MODEL**\n"
      ],
      "metadata": {
        "id": "yheTpd0nNnqF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import SimpleRNN, Dense, Dropout, LSTM\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "wn3gGRVKNyZU"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and preprocess the MNIST dataset\n",
        "(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()"
      ],
      "metadata": {
        "id": "T_CrvEewQxaU"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize the data\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "\n",
        "# Convert labels to categorical\n",
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)"
      ],
      "metadata": {
        "id": "hCIWVWJkQ3jO"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshape data for RNN\n",
        "X_train_rnn = X_train.reshape(-1, 28, 28)\n",
        "X_test_rnn = X_test.reshape(-1, 28, 28)\n"
      ],
      "metadata": {
        "id": "God2w43ZQ4aa"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# RNN Model\n",
        "rnn = Sequential()\n",
        "rnn.add(SimpleRNN(128, input_shape=(28, 28), activation='relu', return_sequences=True))\n",
        "rnn.add(Dropout(0.2))\n",
        "rnn.add(SimpleRNN(64, activation='relu'))\n",
        "rnn.add(Dropout(0.2))\n",
        "rnn.add(Dense(10, activation='softmax'))\n",
        "\n",
        "\n",
        "rnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "history_rnn = rnn.fit(X_train_rnn, y_train, epochs=5, validation_data=(X_test_rnn, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e6wJoKnZRFnH",
        "outputId": "4223f1c7-fa59-4aaa-c1a8-3f844d8f3e03"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 50s 25ms/step - loss: 0.4948 - accuracy: 0.8434 - val_loss: 0.1730 - val_accuracy: 0.9502\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 40s 21ms/step - loss: 0.1972 - accuracy: 0.9474 - val_loss: 0.1329 - val_accuracy: 0.9602\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 39s 21ms/step - loss: 0.1588 - accuracy: 0.9583 - val_loss: 0.1377 - val_accuracy: 0.9625\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 40s 21ms/step - loss: 0.1429 - accuracy: 0.9622 - val_loss: 0.1044 - val_accuracy: 0.9695\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 39s 21ms/step - loss: 0.1257 - accuracy: 0.9656 - val_loss: 0.1246 - val_accuracy: 0.9686\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate model\n",
        "rnn_accuracy = rnn.evaluate(X_test_rnn, y_test)[1]\n",
        "print(\"RNN Accuracy:\", rnn_accuracy)\n",
        "\n",
        "# Plotting results\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(history_rnn.history['accuracy'], label='RNN Training Accuracy')\n",
        "plt.plot(history_rnn.history['val_accuracy'], label='RNN Validation Accuracy')\n",
        "plt.title('RNN Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "K78jSDslRIoD",
        "outputId": "6e605f64-b3b8-4552-8aa2-61977feb8629"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 3s 9ms/step - loss: 0.1246 - accuracy: 0.9686\n",
            "RNN Accuracy: 0.9685999751091003\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EXPLANATION:\n",
        "\n",
        "\n",
        "\n",
        "1.   Loading the Dataset:\n",
        " *   The MNIST dataset is loaded using tf.keras.datasets.mnist.load_data() which returns the training and test sets.\n",
        "\n",
        "\n",
        "2.   Normalization:\n",
        " *   The pixel values of the images are normalized by dividing by 255.0 to bring the values between 0 and 1.\n",
        "\n",
        "\n",
        "3.   Label Conversion:\n",
        " *   The labels are converted to categorical format using to_categorical() which is required for multi-class classification.\n",
        "\n",
        "\n",
        "4.   Reshaping Data:\n",
        "\n",
        " * The data is reshaped to the format (number_of_samples, 28, 28) as the RNN expects input shape to be (number_of_samples, time_steps, features).\n",
        "\n",
        "\n",
        "\n",
        "5.   Building the CNN Model:\n",
        "\n",
        " * A simple RNN model is built with SimpleRNN layers, Dropout layers, and a final Dense layer for classification.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "6.   Training the Model:\n",
        " * The model is trained using model.fit() for 5 epochs with the training data and validated on the test data.\n",
        "\n",
        "\n",
        "\n",
        "7.   Evaluating the Model:\n",
        " *  The model's accuracy is evaluated on the test set using model.evaluate().\n",
        "\n",
        "\n",
        "\n",
        "8.   Plotting Results:\n",
        " *  The training and validation accuracy are plotted using Matplotlib to visualize the model performance over epochs.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**bold text**"
      ],
      "metadata": {
        "id": "ozyvVGAZSfLP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "WO8ClczzUgUa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New section\n",
        "# TRANSFORMER MODEL"
      ],
      "metadata": {
        "id": "b2egjhwgUZRf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Dense, LayerNormalization, Dropout, Input\n",
        "from tensorflow.keras.layers import Layer, Embedding, Add\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.datasets import mnist\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "G2x3uv-lUeea"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and preprocess the MNIST dataset\n",
        "(X_train, y_train), (X_test, y_test) = mnist.load_data()\n"
      ],
      "metadata": {
        "id": "nrnlYE0rUiKL"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize the data\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "\n",
        "# Convert labels to categorical\n",
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)"
      ],
      "metadata": {
        "id": "aTi6I2jzUlKF"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the Transformer model\n",
        "class TransformerBlock(Layer):\n",
        "    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n",
        "        super(TransformerBlock, self).__init__()\n",
        "        self.att = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=embed_dim)\n",
        "        self.ffn = tf.keras.Sequential(\n",
        "            [Dense(ff_dim, activation=\"relu\"), Dense(embed_dim),]\n",
        "        )\n",
        "        self.layernorm1 = LayerNormalization(epsilon=1e-6)\n",
        "        self.layernorm2 = LayerNormalization(epsilon=1e-6)\n",
        "        self.dropout1 = Dropout(rate)\n",
        "        self.dropout2 = Dropout(rate)\n",
        "\n",
        "    def call(self, inputs, training):\n",
        "        attn_output = self.att(inputs, inputs)\n",
        "        attn_output = self.dropout1(attn_output, training=training)\n",
        "        out1 = self.layernorm1(inputs + attn_output)\n",
        "        ffn_output = self.ffn(out1)\n",
        "        ffn_output = self.dropout2(ffn_output, training=training)\n",
        "        return self.layernorm2(out1 + ffn_output)\n",
        "\n",
        "class TokenAndPositionEmbedding(Layer):\n",
        "    def __init__(self, maxlen, embed_dim):\n",
        "        super(TokenAndPositionEmbedding, self).__init__()\n",
        "        self.pos_emb = Embedding(input_dim=maxlen, output_dim=embed_dim)\n",
        "        self.add = Add()\n",
        "\n",
        "    def call(self, x):\n",
        "        batch_size = tf.shape(x)[0]\n",
        "        maxlen = tf.shape(x)[1]\n",
        "        positions = tf.range(start=0, limit=maxlen, delta=1)\n",
        "        positions = self.pos_emb(positions)\n",
        "        positions = tf.expand_dims(positions, axis=0)\n",
        "        positions = tf.tile(positions, [batch_size, 1, 1])\n",
        "        return self.add([x, positions])\n",
        "\n",
        "def create_vit_classifier(maxlen, embed_dim, num_heads, ff_dim, num_classes):\n",
        "    inputs = Input(shape=(maxlen, embed_dim))\n",
        "    embedding_layer = TokenAndPositionEmbedding(maxlen, embed_dim)\n",
        "    x = embedding_layer(inputs)\n",
        "    transformer_block = TransformerBlock(embed_dim, num_heads, ff_dim)\n",
        "    x = transformer_block(x)\n",
        "    x = LayerNormalization(epsilon=1e-6)(x)\n",
        "    x = tf.keras.layers.GlobalAveragePooling1D()(x)\n",
        "    x = Dropout(0.1)(x)\n",
        "    x = Dense(20, activation=\"relu\")(x)\n",
        "    x = Dropout(0.1)(x)\n",
        "    outputs = Dense(num_classes, activation=\"softmax\")(x)\n",
        "    return Model(inputs=inputs, outputs=outputs)"
      ],
      "metadata": {
        "id": "4qS6kGH1VJZi"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Prepare the data for the Transformer model\n",
        "embed_dim = 28  # Input feature size (since MNIST images are 28x28)\n",
        "num_heads = 2   # Number of attention heads\n",
        "ff_dim = 32     # Feed-forward layer dimension\n",
        "num_classes = 10  # Number of classes in the MNIST dataset\n",
        "\n",
        "X_train_transformer = X_train.reshape(-1, 28, 28)\n",
        "X_test_transformer = X_test.reshape(-1, 28, 28)"
      ],
      "metadata": {
        "id": "Hbb_cZaRVT4F"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create and compile the Vision Transformer model\n",
        "vit_classifier = create_vit_classifier(maxlen=28, embed_dim=28, num_heads=num_heads, ff_dim=ff_dim, num_classes=num_classes)\n",
        "vit_classifier.compile(optimizer=Adam(learning_rate=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "utq_dFsAVWq_"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "history_vit = vit_classifier.fit(X_train_transformer, y_train, epochs=10, batch_size=32, validation_data=(X_test_transformer, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S-65EZkTVdhG",
        "outputId": "69e55a4f-5063-4f86-cad4-ad0360833555"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "1875/1875 [==============================] - 32s 15ms/step - loss: 0.7645 - accuracy: 0.7439 - val_loss: 0.2523 - val_accuracy: 0.9214\n",
            "Epoch 2/10\n",
            "1875/1875 [==============================] - 29s 16ms/step - loss: 0.3138 - accuracy: 0.9031 - val_loss: 0.2222 - val_accuracy: 0.9274\n",
            "Epoch 3/10\n",
            "1875/1875 [==============================] - 30s 16ms/step - loss: 0.2567 - accuracy: 0.9219 - val_loss: 0.1675 - val_accuracy: 0.9475\n",
            "Epoch 4/10\n",
            "1875/1875 [==============================] - 29s 16ms/step - loss: 0.2279 - accuracy: 0.9318 - val_loss: 0.1571 - val_accuracy: 0.9510\n",
            "Epoch 5/10\n",
            "1875/1875 [==============================] - 29s 15ms/step - loss: 0.2084 - accuracy: 0.9378 - val_loss: 0.1497 - val_accuracy: 0.9547\n",
            "Epoch 6/10\n",
            "1875/1875 [==============================] - 30s 16ms/step - loss: 0.1937 - accuracy: 0.9415 - val_loss: 0.1336 - val_accuracy: 0.9566\n",
            "Epoch 7/10\n",
            "1875/1875 [==============================] - 29s 15ms/step - loss: 0.1827 - accuracy: 0.9456 - val_loss: 0.1317 - val_accuracy: 0.9588\n",
            "Epoch 8/10\n",
            "1875/1875 [==============================] - 30s 16ms/step - loss: 0.1713 - accuracy: 0.9479 - val_loss: 0.1283 - val_accuracy: 0.9606\n",
            "Epoch 9/10\n",
            "1875/1875 [==============================] - 30s 16ms/step - loss: 0.1674 - accuracy: 0.9492 - val_loss: 0.1195 - val_accuracy: 0.9624\n",
            "Epoch 10/10\n",
            "1875/1875 [==============================] - 31s 17ms/step - loss: 0.1610 - accuracy: 0.9518 - val_loss: 0.1272 - val_accuracy: 0.9613\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "vit_accuracy = vit_classifier.evaluate(X_test_transformer, y_test)[1]\n",
        "print(\"Vision Transformer Accuracy:\", vit_accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vqujt-BvVgwn",
        "outputId": "d205910a-9ddb-4751-90db-3ff4676d3a5d"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 2s 7ms/step - loss: 0.1272 - accuracy: 0.9613\n",
            "Vision Transformer Accuracy: 0.9613000154495239\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting results\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(history_vit.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history_vit.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Vision Transformer Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Nks07JYVY-zk",
        "outputId": "c56be854-4433-4795-dfc6-ee56e94a126b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EXPLANATION\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "1.   Loading the Dataset:\n",
        " *   The MNIST dataset is loaded using tf.keras.datasets.mnist.load_data() which returns the training and test sets.\n",
        "\n",
        "\n",
        "2.   Normalization:\n",
        " *   The pixel values of the images are normalized by dividing by 255.0 to bring the values between 0 and 1.\n",
        "\n",
        "\n",
        "3.   Label Conversion:\n",
        " *   The labels are converted to categorical format using to_categorical() which is required for multi-class classification.\n",
        "\n",
        "\n",
        "4.   Reshaping Data:\n",
        "\n",
        " * The data is reshaped to the format (number_of_samples, 28, 28) as the Transformer expects input shape to be (number_of_samples, time_steps, features).\n",
        "\n",
        "\n",
        "\n",
        "5.   Building the CNN Model:\n",
        "\n",
        " * The model is built with TransformerBlock and TokenAndPositionEmbedding layers. The Transformer block includes multi-head self-attention and feed-forward layers, followed by normalization and dropout layers.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "6.   Training the Model:\n",
        " * The model is trained using model.fit() for 10 epochs with the training data and validated on the test data.\n",
        "\n",
        "\n",
        "\n",
        "7.   Evaluating the Model:\n",
        " *  The model's accuracy is evaluated on the test set using model.evaluate().\n",
        "\n",
        "\n",
        "\n",
        "8.   Plotting Results:\n",
        " *  The training and validation accuracy are plotted using Matplotlib to visualize the model performance over epochs.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "C_OIQuKFZKug"
      }
    }
  ]
}